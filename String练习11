/*
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* sum = new ListNode(0);
        ListNode* p = l1,*q = l2;
        ListNode*cur = sum;
        int flag = 0;
        while(q!=NULL||p!=NULL)
        {
            int n1 = (p!=NULL)?p->val : 0;
            int n2 = (q!=NULL)?q->val : 0;
            int n = n1+n2+flag;
            flag = n/10;
            cur->next =new ListNode(n%10);
            
            if(q!=NULL)
                q=q->next;
            if(p!=NULL)
                p=p->next;
            cur=cur->next;
        }
        if(flag){
            cur->next =new ListNode(flag);
        }
        return sum->next;
        
    }
};
