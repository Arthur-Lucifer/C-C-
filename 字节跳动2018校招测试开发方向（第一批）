P为给定的二维平面整数点集。定义 P 中某点x，如果x满足 P 中任意点都不在 x 的右上方区域内（横纵坐标都大于x），则称其为“最大的”。求出所有“最大的”点的集合。（所有点的横坐标和纵坐标都不重复, 坐标轴范围在[0, 1e9) 内）
如下图：实心点为满足条件的点的集合。请实现代码找到集合 P 中的所有 ”最大“ 点的集合并输出。
输入描述:
第一行输入点集的个数 N， 接下来 N 行，每行两个数字代表点的 X 轴和 Y 轴。
对于 50%的数据,  1 <= N <= 10000;
对于 100%的数据, 1 <= N <= 500000;
输出描述:
输出“最大的” 点集合， 按照 X 轴从小到大的方式输出，每行两个数字分别代表点的 X 轴和 Y轴。
输入例子1:
5
1 2
5 3
4 6
7 5
9 0
输出例子1:
4 6
7 5
9 0

#include<iostream>
#include<algorithm>
#include<vector>
#include<map>
#include<deque>
#include<stack>
using namespace std;
bool cmp(pair<int,int> x, pair<int,int> y)
{
    if(x.first == y.first)
        return x.second>y.second;
    return x.first<y.first;
}
int main()
{
    int N;
    cin>>N;
    vector< pair<int,int> > v(N);
    for(int i = 0;i<N;i++)
        cin>>v[i].first>>v[i].second;
    sort(v.begin(),v.end(),cmp);
    deque< pair<int,int> > d;
    for(int i = 0;i<N;i++)
    {
        while(!d.empty())
        {
            if(v[i].first == d.back().first)
                i++;
            else if(v[i].second<d.back().second)
                break;
            else
                d.pop_back();
        }
        d.push_back(v[i]);
    }
    N = d.size();
    for(int i = 0;i<N;i++)
    {
        cout<<d.front().first<<' '<<d.front().second<<endl;
        d.pop_front();
    }
    return 0;
}

给定一个数组序列, 需要求选出一个区间, 使得该区间是所有区间中经过如下计算的值最大的一个：
区间中的最小数 * 区间所有数的和最后程序输出经过计算后的最大值即可，不需要输出具体的区间。如给定序列  [6 2 1]则根据上述公式, 可得到所有可以选定各个区间的计算值:
[6] = 6 * 6 = 36;
[2] = 2 * 2 = 4;
[1] = 1 * 1 = 1;
[6,2] = 2 * 8 = 16;
[2,1] = 1 * 3 = 3;
[6, 2, 1] = 1 * 9 = 9;
从上述计算可见选定区间 [6] ，计算值为 36， 则程序输出为 36。
区间内的所有数字都在[0, 100]的范围内;
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int main()
{
    int n;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < n; i++)
        cin >> v[i];
    long long ans = 0;
    for (int i = 0; i < n; i++)
    {
        int cur = 0;
        for(int j = i;j<n;j++)
        {
            if (v[j] >= v[i])
                cur += v[j];
            else
                break;
        }
             
        for(int j = i-1;j>=0;j--)
        {
            if (v[j] >= v[i])
                cur += v[j];
            else
                break;
        }
        cur *= v[i];
        ans = ans > cur ? ans : cur;
    }
    cout << ans << endl;
    return 0;
}