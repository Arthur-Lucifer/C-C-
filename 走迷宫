NowCoder最喜欢游乐场的迷宫游戏，他和小伙伴们比赛谁先走出迷宫。
现在把迷宫的地图给你，你能帮他算出最快走出迷宫需要多少步吗？

输入描述:
输入包含多组数据。

每组数据包含一个10*10，由“#”和“.”组成的迷宫。其中“#”代表墙；“.”代表通路。

入口在第一行第二列；出口在最后一行第九列。

从任意一个“.”点都能一步走到上下左右四个方向的“.”点。


输出描述:
对应每组数据，输出从入口到出口最短需要几步。
示例1
输入
#.########<br/>#........#<br/>#........#<br/>#........#<br/>#........#<br/>#........#<br/>#........#<br/>#........#<br/>#........#<br/>########.#<br/>#.########<br/>#........#<br/>########.#<br/>#........#<br/>#.########<br/>#........#<br/>########.#<br/>#........#<br/>#.######.#<br/>########.#
输出
16<br/>30

// write your code here cpp
#include<iostream>
#include<string>
#include<queue>
using namespace std;
struct node{
    int x,y,steps;
};
int bfs(string s[])
{
    int visit[10][10] = {0};
    int dir[4][2]={0,-1,0,1,-1,0,1,0};
    queue<node> q;
    node cur{0,1,0},t;
    visit[cur.x][cur.y] = 1;
    q.push(cur);
    while(!q.empty())
    {
        cur = q.front();
        q.pop();
        for(int i = 0;i<4;i++)
        {
            t.x = cur.x + dir[i][0];
            t.y = cur.y + dir[i][1];
            t.steps = cur.steps + 1;
            if(cur.x == 9 && cur.y == 8)
                return cur.steps;
            if(t.x>0 && t.x<10 && t.y>0 && t.y<10 
               && visit[t.x][t.y] == 0 && s[t.x][t.y] == '.')
            {
                q.push(t);
                visit[t.x][t.y] = 1;
            }
        }
    }
    return 0;
}
int main()
{
    string s[10];
    while(cin>>s[0])
    {
        for(int i = 1;i<10;i++)
            cin>>s[i];
        cout<<bfs(s)<<endl;
    }
    return 0;
}