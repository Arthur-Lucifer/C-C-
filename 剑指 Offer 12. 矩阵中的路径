请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。

[["a","b","c","e"],
["s","f","c","s"],
["a","d","e","e"]]

但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。

 

示例 1：

输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true
示例 2：

输入：board = [["a","b"],["c","d"]], word = "abcd"
输出：false
提示：

1 <= board.length <= 200
1 <= board[i].length <= 200
class Solution {
public:
    bool dfs(vector<vector<char>>& board,string&word ,int row,int col,int Pos)
    {
        if (row >= board.size() || row < 0 
        || col >= board[0].size() || col < 0 
        || board[row][col]!=word[Pos]) 
            return false;
        if (Pos == word.size() - 1) 
            return true;
        char tmp = board[row][col];
        board[row][col] = '#';
        bool m=false;
        m = dfs(board, word, row + 1, col, Pos + 1)
        || dfs(board, word, row - 1, col, Pos + 1)
        || dfs(board, word, row, col + 1, Pos + 1)
        || dfs(board, word, row, col - 1, Pos + 1);
        board[row][col] = tmp;
        return m;
    }
    bool exist(vector<vector<char>>& board, string word) {
        bool m=false;
        for(int i=0;i<board.size();i++)
            for (int j = 0; j < board[i].size(); j++)
                if (board[i][j] == word[0])
                    m=dfs(board,word,i, j,0)||m;
        return m;
    }
};