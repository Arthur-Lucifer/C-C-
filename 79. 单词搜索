给定一个二维网格和一个单词，找出该单词是否存在于网格中。
单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。
示例
board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
给定 word = ABCCED, 返回 true
给定 word = SEE, 返回 true
给定 word = ABCB, 返回 false
提示：
board 和 word 中只包含大写和小写英文字母。
1 = board.length = 200
1 = board[i].length = 200
1 = word.length = 10^3

#include<iostream>
#include<string>
#include<vector>
using namespace std;
vector< vector<bool> > flag;
bool word(vector< vector<char> > v, string str, int i, int j, int k)
{
	if (i < 0 || j < 0 || i >= v.size() || j >= v[0].size())
		return false;

	if (flag[i][j] == true && v[i][j] == str[k] && k == str.size() - 1) {
		return true;
	}
	else if (flag[i][j] == true && v[i][j] == str[k]) {
		flag[i][j] = false;
		return word(v, str, i - 1, j, k + 1) || word(v, str, i + 1, j, k + 1) || word(v, str, i, j - 1, k + 1) || word(v, str, i, j + 1, k + 1);
	}
	else {
		flag = vector< vector<bool> >(v.size(), vector<bool>(v[0].size(), true));
		if (j + 1 < v[i].size())
			return word(v, str, i, j + 1, 0);
		else if (i + 1 < v.size())
			return word(v, str, i + 1, 0, 0);
	}
	//return false;
}
int main()
{
	string str;
	vector< vector<char> > v;
	cin >> str;
	while (1) {
		if (str.size() > 1 && str.find(',') == string::npos) {
			break;
		}
		vector<char> t;
		for (int k = 0; k < str.size(); k += 2) {
			t.push_back(str[k]);
		}
		v.push_back(t);
		cin >> str;
	}
	flag = vector< vector<bool> >(v.size(), vector<bool>(v[0].size(), true));
	cout << word(v, str, 0, 0, 0) << endl;
	return 0;
}