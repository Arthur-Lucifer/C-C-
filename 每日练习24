1.
小东所在公司要发年终奖，而小东恰好获得了最高福利，他要在公司年会上参与一个抽奖游戏，游戏在一个
6*6的棋盘上进行，上面放着36个价值不等的礼物，每个小的棋盘上面放置着一个礼物，他需要从左上角开始
游戏，每次只能向下或者向右移动一步，到达右下角停止，一路上的格子里的礼物小东都能拿到，请设计一
个算法使小东拿到价值最高的礼物。
给定一个6*6的矩阵board，其中每个元素为对应格子的礼物价值,左上角为[0,0],请返回能获得的最大价值，保
证每个礼物价值大于100小于1000。
输入描述：
输出描述：
示例1:
输入
输出
正确答案：
class Bonus {
public:
    int getMost(vector<vector<int> > board) {
        // write code here
        vector<vector<int> > v(6,vector<int>(6,0));
        v[0][0] = board[0][0];
        for(int i = 1 ;i<6;i++){
            v[i][0] = v[i-1][0] + board[i][0];
            v[0][i] = v[0][i-1] + board[0][i];
        }
        for(int i = 1;i<6;i++)
            for(int j = 1;j<6;j++)
                v[i][j] = board[i][j] + max(v[i-1][j],v[i][j-1]);
        return v[5][5];
    }
};

2.
定义一个二维数组N*M（其中2<=N<=10;2<=M<=10），如5 × 5数组下所示：
int maze[5][5] = {
0, 1, 0, 0, 0,
0, 1, 0, 1, 0,
0, 0, 0, 0, 0,
0, 1, 1, 1, 0,
0, 0, 0, 1, 0,
};
它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找
出从左上角到右下角的最短路线。入口点为[0,0],既第一空格是可以走的路。
Input
一个N × M的二维数组，表示一个迷宫。数据保证有唯一解,不考虑有多解的情况，即迷宫只有一条通道。
Output
左上角到右下角的最短路径，格式如样例所示。
Sample Input
0 1 0 0 0
0 1 0 1 0
0 0 0 0 0
0 1 1 1 0
0 0 0 1 0
Sample Output
(0, 0)
(1, 0)
(2, 0)
(2, 1)
(2, 2)
(2, 3)
(2, 4)
(3, 4)
(4, 4)
输入描述：
输入两个整数，分别表示二位数组的行数，列数。再输入相应的数组，其中的1表示墙壁，0表示可以走的
路。数据保证有唯一解,不考虑有多解的情况，即迷宫只有一条通道。
输出描述：
左上角到右下角的最短路径，格式如样例所示。
示例1:
输入
5 5
0 1 0 0 0
0 1 0 1 0
0 0 0 0 0
0 1 1 1 0
0 0 0 1 0
输出
(0,0)
(1,0)
(2,0)
(2,1)
(2,2)
(2,3)
(2,4)
(3,4)
(4,4)
正确答案：
#include<iostream>
#include<vector>
using namespace std;
int N,M;
vector<vector<int>> v;
vector<vector<int>> res;
void road(int i ,int j)
{
    v[i][j] = -1;
    if(i == N-1 && j == M-1)
        res = v;
    if(i+1<N && v[i+1][j] == 0)
        road(i+1,j);
    if(j+1<M && v[i][j+1] == 0)
        road(i,j+1);
    if(i-1>=0 && v[i-1][j] == 0)
        road(i-1,j);
    if(j-1>=0 && v[i][j-1] == 0)
        road(i,j-1);
    v[i][j] = 0;
    return;
}
void out(int i ,int j)
{
    if(res[i][j] == -1){
        printf("(%d,%d)\n",i,j);
        res[i][j] = 2;
        if(i+1<N && res[i+1][j] == -1)
            out(i+1,j);
        else if(j+1<M && res[i][j+1] == -1)
            out(i,j+1);
        else if(i-1>=0 && res[i-1][j] == -1)
            out(i-1,j);
        else if(j-1>=0 && res[i][j-1] == -1)
            out(i,j-1);
    }
    return;
}
int main()
{
    while(cin>>N>>M)
    {
        v = vector<vector<int>>(N,vector<int>(M,0));
        for(int i = 0;i<N;i++)
            for(int j = 0;j<M;j++)
                cin>>v[i][j];
        road(0,0);
        out(0,0);
    }
    return 0;
}
