根据一棵树的中序遍历与后序遍历构造二叉树。
注意:
你可以假设树中没有重复的元素。
例如，给出
中序遍历 inorder = [9,3,15,20,7]
后序遍历 postorder = [9,15,7,20,3]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7
   
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    map<int,int> m;
    int post;
    TreeNode* helper(vector<int>& inorder, vector<int>& postorder,int left,int right) {
        if(left>right)
            return nullptr;     
        int rootVal = postorder[post--];
        TreeNode* root = new TreeNode(rootVal);
        int min = m[rootVal];
        root->right = helper(inorder,postorder,min+1,right);
        root->left = helper(inorder,postorder,left,min-1);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        for(int i = 0;i<inorder.size();i++)
            m.insert(pair<int, int>(inorder[i], i));      
        post = postorder.size() - 1;
        return helper(inorder,postorder,0,postorder.size() - 1);
    }
};