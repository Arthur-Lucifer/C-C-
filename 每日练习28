1. 给定一个长度不小于2的数组arr。 写一个函数调整arr，使arr中要么所有的偶数位上都是偶数，要么所有的
奇数位上都是奇数上。 要求：如果数组长度为N，时间复杂度请达到O(N)，额外空间复杂度请达到O(1),下标
0,2,4,6...算作偶数位,下标1,3,5,7...算作奇数位，例如[1,2,3,4]调整为[2,1,4,3]即可
输入描述：
输出描述：
示例1:
输入
输出
正确答案：
class Solution {
public:
    /**
     *  奇数位上都是奇数或者偶数位上都是偶数
     *  输入：数组arr，长度大于2
     *  len：arr的长度
     *  将arr调整成奇数位上都是奇数或者偶数位上都是偶数
     */
    void oddInOddEvenInEven(vector<int>& arr, int len) {
        int i = 0;//偶数位
        int j = 1;//奇数位
        while(i<len && j<len)
        {
            while(i<len && arr[i]%2==0)
                i+=2;
            while(j<len && arr[j]%2!=0)
                j+=2;
            //if(i>=len || j>=len)
            //    break;
            if(i<len && j<len)
            {
                int t = arr[i];
                arr[i] = arr[j];
                arr[j] = t;
            }
            //swap(arr[i],arr[j]);
        }
        /*while(i<len && j<len)
         {
             if(arr[len-1]%2==0)
             {
                 swap(arr[len-1],arr[i]);
                 i+=2;
             }
             else
             {
                  swap(arr[len-1],arr[j]);
                  j+=2;
             }
         }*/
        return;
    }
};
2. 老猴子辛苦了一辈子，给那群小猴子们留下了一笔巨大的财富——一大堆桃子。老猴子决定把这些桃子分给
小猴子。
第一个猴子来了，它把桃子分成五堆，五堆一样多，但还多出一个。它把剩下的一个留给老猴子，自己拿走
其中的一堆。
第二个猴子来了，它把桃子分成五堆，五堆一样多，但又多出一个。它把多出的一个留给老猴子，自己拿走
其中的一堆。
后来的小猴子都如此照办。最后剩下的桃子全部留给老猴子。
这里有n只小猴子，请你写个程序计算一下在开始时至少有多少个桃子，以及最后老猴子最少能得到几个桃
子。
输入描述：
输入包括多组测试数据。
每组测试数据包括一个整数n(1≤n≤20)。
输入以0结束，该行不做处理。
输出描述：
每组测试数据对应一行输出。
包括两个整数a，b。
分别代表开始时最小需要的桃子数，和结束后老猴子最少能得到的桃子数。
示例1:
输入
5
1
0
输出
3121 1025
1 1
正确答案：
// write your code here cpp
#include<iostream>
#include<cmath>
using namespace std;
int main()
{
    int n;
    while(cin>>n)
    {
        if(n){
            long a = pow(5,n) - 4;
            long b = pow(4,n) - 4 + n;
            cout<<a<<' '<<b<<endl;
        }
    }
    return 0;
}
