下面两个结构体
编码能力
int x = 1;
do{
printf("%2d\n",x++);
}while(x--);
struct One{
double d;
char c;
int i;
}
struct Two{
char c;
double d;
int i;
3
4
5
在#pragma pack(4)和#pragma pack(8)的情况下，结构体的大小分别是
A 16 24,16 24
B 16 20,16 20
C 16 16,16 24
D 16 16,24 24
他的回答： A (错误)
正确答案： C

下列程序的打印结果是?
A xyabcAB
B abcABz
C ABabcz
D xycdBCD
E 运行出错
他的回答： E (错误)
正确答案： D

int main(){
int a;float b,c;
scanf("%2d%3f%4f",&a,&b,&c);
printf("\na=%d,b=%d,c=%f\n",a,b,c);
6
7
8
9
若运行时从键盘上输入9876543210l,则上面程序在gcc编译器下的输出结果是
A a=98,b=765,c=4321.000000
B a=98,b=0,c=0.000000
C a=98,b=765.000000,c=4321.000000
D a=98,b=765.0,c=4321.0
他的回答： A (错误)
正确答案： B

STL中的unordered_map和priority_queue使用的底层数据结构分别是什么?()
A rbtree,queue
B hashtable,heap
C rbtree,heap
D hashtable,queue
他的回答： D (错误)
正确答案： B

下面说法正确的是()
A 一个空类默认一定生成构造函数,拷贝构造函数,赋值操作符,引用操作符,析构函数
B 可以有多个析构函数
C 析构函数可以为virtual,可以被重载
D 类的构造函数如果都不是public访问属性,则类的实例无法创建
他的回答： D (错误)
正确答案： A

关于重载和多态正确的是
A 如果父类和子类都有相同的方法,参数个数不同,将子类对象赋给父类后,由于子类继承于父类,所以使用父类指针 调用父类方法时,实际调用的是子类的方法
B 选项全部都不正确
C 重载和多态在C++面向对象编程中经常用到的方法,都只在实现子类的方法时才会使用
D
}
ClassA *pclassa=new ClassA[5];
delete pclassa;
class A{
10
他的回答： D (错误)
正确答案： B

请选择下列程序的运行结果
A B0::display0 B0::display0 B0::display0
B B0::display0 B0::display0 D1::display0
C B0::display0 B1::display0 D1::display0
D B0::display0 B1::display0 B1::display0
他的回答： C (错误)
正确答案： A

请选择下列程序的运行结果
#include<iostream>
using namespace std;
class B0//基类BO声明
{
public://外部接口
virtual void display()//虚成员函数
{
cout<<"B0::display0"<<endl;}
};
class B1:public B0//公有派生
{
public:
void display() { cout<<"B1::display0"<<endl; }
};
class D1: public B1//公有派生
{
public:
void display(){ cout<<"D1::display0"<<endl; }
};
void fun(B0 ptr)//普通函数
{
ptr.display();
}
int main()//主函数
{
B0 b0;//声明基类对象和指针
B1 b1;//声明派生类对象
D1 d1;//声明派生类对象
fun(b0);//调用基类B0函数成员
fun(b1);//调用派生类B1函数成员
fun(d1);//调用派生类D1函数成员
}
A B0::display0 B0::display0 B0::display0
B B0::display0 B0::display0 D1::display0
C B0::display0 B1::display0 D1::display0
D B0::display0 B1::display0 B1::display0
他的回答： C (错误)
正确答案： A

1. “回文串”是一个正读和反读都一样的字符串，比如“level”或者“noon”等等就是回文串。花花非常喜欢这种拥
有对称美的回文串，生日的时候她得到两个礼物分别是字符串A和字符串B。现在她非常好奇有没有办法将字
符串B插入字符串A使产生的字符串是一个回文串。你接受花花的请求，帮助她寻找有多少种插入办法可以使
新串是一个回文串。如果字符串B插入的位置不同就考虑为不一样的办法。
例如：
A = “aba”，B = “b”。这里有4种把B插入A的办法：
* 在A的第一个字母之前: "baba" 不是回文
* 在第一个字母‘a’之后: "abba" 是回文
* 在字母‘b’之后: "abba" 是回文
* 在第二个字母'a'之后 "abab" 不是回文
所以满足条件的答案为2
输入描述：
每组输入数据共两行。
第一行为字符串A
第二行为字符串B
字符串长度均小于100且只包含小写字母
输出描述：
输出一个数字，表示把字符串B插入字符串A之后构成一个回文串的方法数
示例1:
输入
aba
b
输出
2
正确答案：
#include<iostream>
#include<string>
using namespace std;
bool huiwen(string str)
{
  int i = 0;
  int j = str.size()-1;
  while(i<=j)
  {
    if(str[i++]!=str[j--])
      return false;
  }
  return true;
}
int main()
{
  string A,B;
  //cin>>A>>B;
  getline(cin,A);
  getline(cin,B);
  int count = 0;
  for(int i = 0;i<=A.size();i++)
  {
    string C = A;
    C.insert(i,B);
    if(huiwen(C))
      count++;
  }
  cout<<count<<endl;
  return 0;
}
2. 一个数组有 N 个元素，求连续子数组的最大和。 例如：[-1,2,1]，和最大的连续子数组为[2,1]，其和为 3
输入描述：
输入为两行。 第一行一个整数n(1 <= n <= 100000)，表示一共有n个元素 第二行为n个数，即每个元素,每个
整数都在32位int范围内。以空格分隔。
输出描述：
所有连续子数组中和最大的值。
示例1:
输入
3 -1 2 1
输出
3
正确答案：
#include<iostream>
#include<vector>
using namespace std;
int main()
{
  int n;
  cin>>n;
  vector<int> v(n);
  for(int i = 0;i<n;i++){
    cin>>v[i];
  }
  int ret=v[0];
  for(int i = 0;i<n;i++)
  {
    int res = 0;
    for(int j = i;j<n;j++)
    {
      res+=v[j];
      if(res>ret)
        ret = res;
      if(res<=0)
        break;
    }
  }
  cout<<ret<<endl;
  return 0;
}
