在考场里，一排有 N 个座位，分别编号为 0, 1, 2, ..., N-1 。
当学生进入考场后，他必须坐在能够使他与离他最近的人之间的距离达到最大化的座位上。如果有多个这样的座位，他会坐在编号最小的座位上。(另外，如果考场里没有人，那么学生就坐在 0 号座位上。)
返回 ExamRoom(int N) 类，它有两个公开的函数：其中，函数 ExamRoom.seat() 会返回一个 int （整型数据），代表学生坐的位置；函数 ExamRoom.leave(int p) 代表坐在座位 p 上的学生现在离开了考场。每次调用 ExamRoom.leave(p) 时都保证有学生坐在座位 p 上。
示例：
输入：["ExamRoom","seat","seat","seat","seat","leave","seat"], [[10],[],[],[],[],[4],[]]
输出：[null,0,9,4,2,null,5]
解释：
ExamRoom(10) -> null
seat() -> 0，没有人在考场里，那么学生坐在 0 号座位上。
seat() -> 9，学生最后坐在 9 号座位上。
seat() -> 4，学生最后坐在 4 号座位上。
seat() -> 2，学生最后坐在 2 号座位上。
leave(4) -> null
seat() -> 5，学生最后坐在 5 号座位上。
提示：
1 <= N <= 10^9
在所有的测试样例中 ExamRoom.seat() 和 ExamRoom.leave() 最多被调用 10^4 次。
保证在调用 ExamRoom.leave(p) 时有学生正坐在座位 p 上。
typedef unsigned long LONG;
class ExamRoom {
public:
    ExamRoom(int N) {
        n = N;
        int tmp = 0;
        seats[encode(0, n+1, tmp)] = hash(0, n+1);
    }
    
    int seat() {
        auto it = seats.rbegin();
        int l = it->second >> 32;
        int r = it->second & 0xffffffff;
        //int tmp = 0;
        seats.erase(it->first);
        int pos = 0;
        if (l == 0) { //最左边还没人坐
            pos = 1;
        } else if (r == n+1) { //最右边没人坐
            pos = n;
        } else encode(l, r, pos); //当前最大空位的空间左边是l，右边是r。l和r都有人坐了
        
        left[l] = pos;
        right[pos] = l;
        left[pos] = r;
        right[r] = pos;
        int tmp = 0;
        if (pos - l > 1) seats[encode(l, pos, tmp)] = hash(l, pos);
        if (r - pos > 1) seats[encode(pos, r, tmp)] = hash(pos, r);
        return pos - 1;
    }
    
    void leave(int p) {
        p++;
        int l = right[p];
        int r = left[p];

        int tmp = 0;
        long s1 = encode(l, p, tmp);
        long s2 = encode(p, r, tmp);
        seats.erase(s1);
        seats.erase(s2);
       
        seats[encode(l, r, tmp)] = hash(l, r);
        left[l] = r;
        right[r] = l;
    }
    long hash(int l, int r) {
        long res = ((static_cast<long>(l)) << 32) + r;
        return res;
    }
    long encode(int l, int r, int& pos) { //pos返回l到r内可坐的那个位置，l和r都已经有人坐了。
        int dis = 0;
        if (l == 0) {
            dis = r - 2;
            pos = 1;
        } else if (r == n+1) {
            dis = n - l - 1;
            pos = n;
        } else {
            dis = (r - l - 2) / 2;
            pos = l + dis + 1;
        }
        LONG res = ((static_cast<LONG>(dis)) << 32) + (0xffffffff - pos);
        // cout << len << "," << l << "," << res << endl;
        return res;
    }
    map<LONG, LONG> seats;
    unordered_map<int, int> left; //以p为左端的连续空位的右端坐标
    unordered_map<int, int> right;//以p为 右端的连续空位的左端坐标
    int n;
};