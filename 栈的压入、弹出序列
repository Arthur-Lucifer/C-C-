题目描述
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
class Solution {
public:
bool IsPopOrder(vector<int> pushV,vector<int> popV) {
	if(pushV.size() == 0 || popV.size() == 0 || pushV.size() != popV.size()){
		return false;
	}
	stack<int> st; //辅助栈，帮我们进行入栈出栈模拟
	int i = 0;
	int j = 0;
	for(; i < pushV.size(); i++){ //遍历入栈序列，开始入栈
		st.push(pushV[i]);
		while(!st.empty() && st.top() == popV[j]){
			st.pop(); //去掉栈顶，在比较下一个
			j++;
		}
	}
	return st.empty();
}
};