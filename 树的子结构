题目描述
输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
	val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
bool IsSameFromBegin(TreeNode* begin, TreeNode* beginSub){
	if(nullptr == beginSub){
		return true;
	}
	if(nullptr == begin){ //begin为空，说明beginSub不是你的子树
	return false;
	}
	if(begin->val != beginSub->val){
		return false; //说明，整树中，有不相等的节点
	}
	return IsSameFromBegin(begin->left, beginSub->left) && IsSameFromBegin(begin->right,
	beginSub->right);
}
bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
{
	if(pRoot1 == nullptr || pRoot2 == nullptr){
		return false;
	}
	bool result = false;
	if(pRoot1->val == pRoot2->val){
		result = IsSameFromBegin(pRoot1, pRoot2);
	}
	if(!result){
		result = HasSubtree(pRoot1->left, pRoot2);
	}
	if(!result){
		result = HasSubtree(pRoot1->right, pRoot2);
	}
	return result;
}
};