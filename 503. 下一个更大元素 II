给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。
示例 1:
输入: [1,2,1]
输出: [2,-1,2]
解释: 第一个 1 的下一个更大的数是 2；
数字 2 找不到下一个更大的数； 
第二个 1 的下一个最大的数需要循环搜索，结果也是 2。
注意: 输入数组的长度不会超过 10000。
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* nextGreaterElements(int* nums, int numsSize, int* returnSize){

    *returnSize = numsSize;
    if(nums==NULL || numsSize<1) return NULL;
    
    int* res = (int*)malloc(sizeof(int)*numsSize);  // 用于存储结果

    // 循环数组，把原数组2份拼接一个
    int* res1 = (int*)malloc(sizeof(int)*numsSize*2);  // 用于存储 镜像数组
    for(int i = 0;i<numsSize;i++) {
        res1[i] = nums[i];
        res1[i+numsSize] = nums[i];
    }

    for(int j =0;j<numsSize;j++) {
        int flag = 1;
        // res1[j] = -1;
        for(int k=j+1;k<numsSize*2;k++) {
            if(res1[k] > res1[j]) {
                res1[j] = res1[k];
                flag = 0;
                break;
            }
        }
        if(flag) res1[j] = -1;
    }

    for(int j = 0;j<numsSize;j++) {
        // printf("res1[%d]=%d\n",res1[j]);
        res[j] = res1[j];
    }

    free(res1);
    return res;
}