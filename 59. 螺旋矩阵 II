给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。
示例:
输入: 3
输出:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> result(n, vector<int>(n, 0));
        helper(0,n-1,0,n-1,result,1);
        return result;
    }

    void helper(int rowStart, int rowEnd,int colStart,int colEnd,vector<vector<int>>& result,int curNumber){
        //base case
        if(rowStart>=rowEnd||colStart>=colEnd){
            if(rowStart==rowEnd) result[rowStart][colStart] = curNumber;//对应n为奇数的情况
            return;
        } 
        //traverse one layer
        int i=rowStart,j=colStart;
        while(j<colEnd){//对应方向从左上到右上
            result[i][j++] = curNumber;
            curNumber +=1;//curNumber利用完每次要+1
        } 
        //这里j = colEnd 最右上方顶点的赋值将会在下一个while循环中进行，以此类推
        while(i<rowEnd) {//从右上到右下
            result[i++][j] = curNumber;
            curNumber +=1;
        } 
        while(j>colStart)  {//从右下到左下
            result[i][j--] = curNumber;
            curNumber +=1;
        } 
        while(i>rowStart) {//从左下到左上
            result[i--][j] = curNumber;
            curNumber +=1;
        } 
        //start next layer
        helper(rowStart+1,rowEnd-1,colStart+1,colEnd-1,result,curNumber);//start和end同时向中心前进一位
    }
};