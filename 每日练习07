下列程序段执行后，输出d的值为()
A 1
B 2
C 3
D 0
他的回答： D (错误)
正确答案： A

#include <stdio.h>
int main()
{
int a=1,b=2,c=3,d=0;
if(a == 1 && b++==2)
if(b!=2||c--!=3)
printf("%d,%d,%d\n" ,a,b,c);
else
printf("%d,%d,%d\n" ,a,b,c);
else
printf("%d,%d,%d\n" ,a,b,c);
return 0;
}
下面程序输出是什么？
A 1，2，3
B 1，3，2
C 3，2，1
D 1，3，3
他的回答： B (错误)
正确答案： D

【Fibonacci数列】Fibonacci数列是这样定义的：
F[0] = 0
F[1] = 1
for each i ≥ 2: F[i] = F[i-1] + F[i-2]
因此，Fibonacci数列就形如：0, 1, 1, 2, 3, 5, 8, 13, ...，在Fibonacci数列中的数我们称为Fibonacci数。给你一个N，你想让其变为一个Fibonacci数，每一步你可以把
当前数字X变为X-1或者X+1，现在给你一个数N求最少需要多少步可以变为Fibonacci数。
输入描述：
输入为一个正整数N(1 ≤ N ≤ 1,000,000)
输出描述：
输出一个最小的步数变为Fibonacci数"
示例1：
输入
15
输出
2
#include<iostream>
using namespace std;
int main()
{
    int N;
    cin>>N;
    int x = 0,y = 1,z = 1;
    while(N>z)
    {
        z = x+y;
        x = y;
        y = z;
    }
    int t = N-x<y-N ? N-x:y-N;
    cout<<t<<endl;
    return 0;
}

对于一个字符串，请设计一个算法，判断其是否为一个合法的括号串。
给定一个字符串A和它的长度n，请返回一个bool值代表它是否为一个合法的括号串。
测试样例：
"(()())",6
返回：true
测试样例：
"()a()()",7
返回：false
测试样例：
"()(()()",7
返回：false
class Parenthesis {
public:
    bool chkParenthesis(string A, int n) {
        // write code here
        stack<char> s;
        for(int i = 0;i<n;i++)
        {
            if(A[i] == '('){
                s.push(A[i]);
            }
            else if (A[i] == ')'){
                if(!s.empty())
                    s.pop();
                else
                    return false;
            }
            else{
                return false;
            }
        }
        return true;
    }
};
