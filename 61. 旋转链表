给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。
示例 1:
输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:
输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head||!head->next) return head;//list中只有一个元素怎么旋转都不会变，直接返回即可
        int len = 0;//遍历到尾统计一下长度
        ListNode* iter = head;
        while(iter){
            len++;
            iter = iter->next;
        }
        k = k%len;//取余降维
        while(k){//把迭代次数控制在了len以内
           ListNode* last = head;//每次都要重新搜寻last和newlast(即prev)
           ListNode* prev = nullptr;
          while(last->next){
              prev = last;
              last = last->next;
            }
            //此时last成为新的队头，prev成为新的队尾
            prev->next = nullptr;
            last->next = head;
            head = last;//修改head
            k--;
        }
        return  head;
    }
};